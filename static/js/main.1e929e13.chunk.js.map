{"version":3,"sources":["components/Header.js","components/NotationBox.js","components/CommonMove.js","components/CommonMoves.js","components/OpeningList.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","className","defaultProps","NotationBox","onConvert","useState","text","setText","form","placeholder","value","onChange","e","target","id","onSubmit","preventDefault","alert","type","CommonMove","move","onGo","san","white","black","draws","onClick","uci","CommonMoves","moves","map","index","OpeningList","fen","pgnSan","pgnUci","fromBox","data","setData","isFirstPosition","setIsFirstPosition","useEffect","a","fetch","res","json","fetchOpening","openingName","opening","name","console","log","window","open","style","color","length","App","setFEN","DefaultData","setPGNSan","setPGNUci","setFromBox","chess","Chess","options","sloppy","convertPGN","pgn","isFromBox","load_pgn","toString","newMoveSan","newMoveUci","newPGNSan","newPGNUci","inter","includes","concat","prevPGNSan","prevPGNUci","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e929e13.chunk.js","sourcesContent":["\r\n\r\nconst Header = ({title}) => {\r\n    return (\r\n        <header className='header'>\r\n            <h1>{title}</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    title: 'Chess Openings',\r\n  }\r\n\r\nexport default Header\r\n","import React, {useState} from 'react'\r\n\r\nconst NotationBox = ({onConvert}) => {\r\n    const [text, setText] = useState('')\r\n    const submitPGN = (e) => {\r\n        e.preventDefault()\r\n    \r\n          if (!text){\r\n              alert('Please put in a notation.')\r\n              return\r\n          }\r\n          onConvert(text, true)\r\n          setText('')\r\n          \r\n      }\r\n    return(\r\n        <div className='notation'>\r\n            <textarea className='textbox' form='notationForm' placeholder=\"Type in a PGN chess notation (eg. 1. e4 e5 2. Ke2)\" value={text} onChange={(e) => setText(e.target.value)}></textarea>\r\n            <form id='notationForm' onSubmit={submitPGN}>\r\n                <input type=\"submit\" value=\"Submit Notation\" className='btn'></input>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotationBox\r\n","import React from 'react'\r\n\r\nconst CommonMove = ( {move, onGo, id} ) => {\r\n\r\n    return (\r\n        <div className=\"commonMove\" id={id}>\r\n            <h3 className=\"listNotation\">{move.san}</h3>\r\n            <h3 className=\"timesPlayed\">Times played - {move.white+move.black+move.draws}</h3>\r\n            <button className=\"goTo\" id={id} onClick={() => onGo(move.san, move.uci)}>Go to</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommonMove\r\n","import React from 'react'\r\nimport CommonMove from './CommonMove'\r\n\r\nconst CommonMoves = ({ moves, onGo }) => {\r\n    \r\n    return (\r\n        <>\r\n            {moves.map((move, index) => (\r\n                <CommonMove move={move} onGo={onGo} key={index} id={index} />\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CommonMoves\r\n","import React, {useState, useEffect} from 'react'\r\nimport CommonMoves from './CommonMoves';\r\nconst OpeningList = ({fen, pgnSan, pgnUci, onGo, fromBox}) => {\r\n    const [data, setData] = useState(pgnSan);\r\n    const [isFirstPosition, setIsFirstPosition] = useState(true);\r\n    useEffect(() => {\r\n        const fetchOpening = async (fen) => {\r\n            if(!isFirstPosition){\r\n                if(!fromBox){\r\n                    const res = await fetch(`https://explorer.lichess.ovh/lichess?variant=standard&speeds[]=bullet&speeds[]=blitz&speeds[]=rapid&speeds[]=classical&ratings[]=1600&ratings[]=2500&play=${pgnUci}`)\r\n                    const data = await res.json()\r\n                    setData(data)\r\n                }\r\n                else if (fromBox){\r\n                    const res = await fetch(`https://explorer.lichess.ovh/lichess?variant=standard&speeds[]=bullet&speeds[]=blitz&speeds[]=rapid&speeds[]=classical&ratings[]=1600&ratings[]=2500&fen=${fen}`)\r\n                    const data = await res.json()\r\n                    setData(data)\r\n                }\r\n            }\r\n            else{\r\n                setIsFirstPosition(false)\r\n            }\r\n          }\r\n\r\n          fetchOpening(fen)\r\n    }, [fen])\r\n    \r\n    \r\n    const openAnalysis = () => {\r\n        window.open(\r\n            `https://lichess.org/analysis/standard/${fen}`,\r\n            '_blank'\r\n            );\r\n    }     \r\n\r\n    var openingName\r\n    if(data.opening)\r\n    {\r\n        openingName =`This is the ${data.opening.name}!`;\r\n    }\r\n    else if(fen==='rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'){\r\n        openingName = \"This is the Starting Position!\";\r\n    }\r\n    else{\r\n        openingName=pgnSan;\r\n    }\r\n\r\n    return (\r\n        <div className='list'>\r\n            {console.log(data)}\r\n            <button className='opTitle' onClick={() => openAnalysis()}>\r\n            {\r\n            /*(data.opening !== null ? */<h1>{openingName}</h1>/*\r\n            : <h1>{pgn}</h1>)*/}\r\n            <p style={{color:\"#717370\"}}>Click for lichess.org analysis</p>\r\n            </button>\r\n            <h1 className=\"commonColon\">Most common moves in the position:</h1>\r\n            <div className=\"moves\">\r\n            {data.moves.length > 0 && <CommonMoves moves={data.moves} onGo={onGo}/>}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    \r\n}\r\n\r\nexport default OpeningList\r\n","import React, {useState} from 'react'\nimport Chess from 'chess.js'\nimport Header from './components/Header'\nimport NotationBox from './components/NotationBox'\nimport OpeningList from './components/OpeningList'\nimport DefaultData from './components/DefaultData.json'\nconst App = () => {\n  const [fen, setFEN] = useState(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\");\n  const [pgnSan, setPGNSan] = useState(DefaultData);\n  const [pgnUci, setPGNUci] = useState(DefaultData);\n  const [fromBox, setFromBox] = useState(false);\n  const chess = new Chess()\n  const options = {sloppy:true}\n  \n  //converts PGN notation into FEN which is used by the lichess API.\n  const convertPGN = (pgn, isFromBox) => {\n    if(!chess.load_pgn(pgn, options)){\n    alert(\"Invalid notation. Please try again.\") \n    return}\n    setPGNSan(pgn)\n    if(isFromBox){\n      setPGNUci(pgn)\n    }\n    setFromBox(isFromBox);\n    chess.load_pgn(pgn.toString())\n    setFEN(chess.fen())\n}\n\n  //adjoins a move chosen with the \"Go to\" button into the sequence.\n  const concatPGN = (newMoveSan, newMoveUci) => {\n    var newPGNSan, newPGNUci,inter=false;\n    if(typeof pgnSan === 'string' && typeof pgnUci==='string' && !pgnUci.includes(\" \")){\n    newPGNSan = pgnSan.concat(' ', newMoveSan)\n    newPGNUci = pgnUci.concat(',', newMoveUci)\n    }\n    else if (typeof pgnSan === 'string')\n    {\n      newPGNSan = pgnSan.concat(' ', newMoveSan)\n      newPGNUci = newPGNSan\n      inter=true;\n    }\n    else\n    {\n      newPGNSan = newMoveSan\n      newPGNUci = newMoveUci\n    }\n    setPGNSan(prevPGNSan => \n      {return{...prevPGNSan, ...newPGNSan};\n    });\n    setPGNUci(prevPGNUci => \n      {return{...prevPGNUci, ...newPGNUci};\n    });\n    chess.load_pgn(newPGNSan)\n    setPGNUci(newPGNUci)\n    console.log(newPGNUci)\n    convertPGN(newPGNSan, inter)\n  } \n\n  return (\n    <div className=\"App\">\n      <Header />\n      <NotationBox \n      onConvert={convertPGN}/>\n      <OpeningList fen={fen} pgnSan={pgnSan} pgnUci={pgnUci} onGo={concatPGN} fromBox={fromBox}/>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}